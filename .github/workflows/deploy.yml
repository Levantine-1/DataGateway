# https://medium.com/devops-techable/build-docker-image-with-github-actions-and-push-it-to-amazon-ecr-d4e739472284

# Although this template is deployed in multiple repos, it is primarily maintained in the Thisper repository.
# https://github.com/Levantine-1/thisper
# And then it is copied to other github repositories as needed in the github actions workflow directory.

name: Deploy to ECR

on:
  push:
    branches:
     - 'master'

env:
  service_name: datagateway
  url: 'https://thisper.levantine.io'

jobs:
  run_terraform:
    name: Apply Terraform Templates
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          repository: 'Levantine-1/thisper' # This is where the run_jenkins_job.sh script is located

      - name: Refresh Terraform
        run: /bin/bash .github/scripts/run_jenkins_job.sh
        env:
          JENKINS_AUTH_KEY: ${{ secrets.JENKINS_AUTH_KEY }}
          url: ${{ env.url }}
          service_name: ${{ env.service_name }}
          job_type: "runTerraform"

  compile_binary_build_and_push_container:
  # This job is used to compile the binary, build the docker image and push it to ECR
  # I'm not uploading the binary to a code artifact repository to keep things simple.
  # The compile build and push steps are in the same job because the binary is compiled in the same directory as the Dockerfile
  # And the Dockerfile is used to build the image by taking the freshly compiled binary and sticking it in the container image.
  # To do that without an artifactory, they're done in the same job so the file persists through the steps.

    name: Compile Build Push Container
    runs-on: ubuntu-latest
    needs: run_terraform

    steps:
    - uses: actions/checkout@v4

    ######### Compile the binary #########
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    ######### Build and Push the Docker image to ECR #########
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.service_name }}
        IMAGE_TAG: ${{ env.service_name }}-image-${{github.run_number}}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy_container:
    name: Pull and Deploy Container
    runs-on: ubuntu-latest
    needs: build_and_push_container
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          repository: 'Levantine-1/thisper' # This is where the run_jenkins_job.sh script is located

      - name: Deploy Container
        run: /bin/bash .github/scripts/run_jenkins_job.sh
        env:
          JENKINS_AUTH_KEY: ${{ secrets.JENKINS_AUTH_KEY }}
          url: ${{ env.url }}
          service_name: ${{ env.service_name }}
          job_type: "deployContainer"